input CreateGroupCallInvitationInput {
  topic: String!
  groupCallList: [GroupCallInput]!
  clientMutationId: String!
}

type CreateGroupCallInvitationPayload {
  viewer: Viewer
  clientMutationId: String!
}

type GroupCall {
  id: ID!
  scheduledTime: String
  maxSignups: Int
}

type GroupCallConnection {
  pageInfo: PageInfo!
  edges: [GroupCallEdge]
}

type GroupCallEdge {
  node: GroupCall
  cursor: String!
}

input GroupCallInput {
  scheduledTime: String!
  maxSignups: String!
}

type GroupCallInvitation implements Node {
  id: ID!
  topic: String
  groupCallList(before: String, after: String, first: Int, last: Int): GroupCallConnection
}

type GroupCallInvitationConnection {
  pageInfo: PageInfo!
  edges: [GroupCallInvitationEdge]
}

type GroupCallInvitationEdge {
  node: GroupCallInvitation
  cursor: String!
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type RootMutation {
  createGroupCallInvitation(input: CreateGroupCallInvitationInput!): CreateGroupCallInvitationPayload
}

type RootQuery {
  viewer: Viewer
  node(id: ID!): Node
}

type Viewer implements Node {
  id: ID!
  groupCallInvitationList(before: String, after: String, first: Int, last: Int): GroupCallInvitationConnection
}
